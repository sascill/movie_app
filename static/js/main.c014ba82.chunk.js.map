{"version":3,"sources":["View.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Reply","_ref","data","list","i","length","push","react_default","a","createElement","writer","content","ReplyForm","state","e","this","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","props","bind","type","placeholder","onChange","changeForm","cols","rows","style","width","Component","MoviePoster","_ref2","poster","alt","src","title","className","View","lastId","replys","id","href","rel","key","View_ReplyForm","formData","newContents","concat","console","log","MovieGenrel","genres","Movie","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","visible","_this2","onClick","openModal","Movie_MoviePoster","map","index","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","react_awesome_modal_lib_default","height","effect","onClickAway","closeModal","src_View","App","num","movies","maximumPage","_renderMovies","movie","src_Movie","title_english","medium_cover_image","_getMovies","_callee","items","regenerator_default","wrap","_context","prev","next","slice","_callApi","sent","stop","fetch","then","response","json","catch","err","_loaditems","InfiniteLoader_default","onVisited","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c014ba82.chunk.js","sourcesContent":["import React, {Component}from 'react';\r\nimport './movie.css';\r\n\r\nfunction Reply({data}){\r\n  var list = [];\r\n  for (let i = 0; i < data.length; i++) {\r\n    list.push(\r\n      <div>\r\n        <div>{data[i].writer}</div>\r\n        <div>{data[i].content}</div>\r\n        <hr />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  return(\r\n    <div>\r\n      {list}\r\n    </div>\r\n  )\r\n}\r\n\r\nclass ReplyForm extends Component{\r\n  state = {\r\n    writer : '',\r\n    content : ''\r\n  }\r\n\r\n  changeForm(e){\r\n  this.setState({[e.target.name]:e.target.value});\r\n}\r\n  render(){\r\n    const textarea_style = {\r\n      width: '80%'\r\n    };\r\n    return(\r\n  <form onSubmit={function(e){\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state)\r\n    \r\n  }.bind(this)}>\r\n    <input type=\"text\" placeholder=\"작성자\" name=\"writer\" onChange={this.changeForm.bind(this)}></input>\r\n    <input type=\"password\" placeholder=\"*****\" ></input><br />\r\n    <textarea cols=\"50\" rows=\"4\" style={textarea_style} name=\"content\" onChange={this.changeForm.bind(this)}></textarea><br />\r\n    <input type=\"submit\" value=\"저장\" />\r\n  </form>\r\n  )\r\n  }\r\n}\r\n\r\nclass View extends Component{\r\n  lastId=1;\r\n  state = {\r\n  replys: [\r\n  { writer: \"너\", content: \"재밌어요!\",id:1}\r\n]\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Modal_Movie\">\r\n      <div>\r\n        <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n      </div>\r\n      <div className=\"Modal_Movie__Columns\">\r\n      <h3>{this.props.title}</h3>\r\n      <hr />\r\n      <div>\r\n        이곳에 입력된 것은 저장 되지 않습니다.<br/>\r\n        자세한 사항은 <a href=\"https://github.com/sascill/movie_app/tree/master\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인해주세요.        \r\n      </div>\r\n      <hr />\r\n      \r\n      <Reply data={this.state.replys} key={this.state.replys.id}></Reply>\r\n      <ReplyForm onSubmit={function(formData){\r\n        this.lastId = this.lastId +1;\r\n        formData.id = this.lastId\r\n        var newContents = this.state.replys.concat(formData);\r\n        this.setState({\r\n          replys: newContents\r\n        });\r\n        console.log(newContents)\r\n      }.bind(this)}></ReplyForm>\r\n      <div>\r\n      \r\n      </div>\r\n    </div>\r\n  </div>\r\n    )\r\n}\r\n  }\r\n\r\n  function MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Modal_Movie__Poster\"></img>\r\n    )\r\n  }\r\n\r\nexport default View;","import React, {Component}  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './movie.css';\r\nimport View from './View';\r\nimport Modal from 'react-awesome-modal';\r\n\r\n\r\n\r\n  function MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"></img>\r\n    )\r\n  }\r\n\r\n  MoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n  }\r\n  \r\n  class Movie extends Component{\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          visible : false\r\n      }\r\n  }\r\n \r\n  openModal() {\r\n      this.setState({\r\n          visible : true\r\n      });\r\n  }\r\n\r\n  closeModal() {\r\n      this.setState({\r\n          visible : false\r\n      });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Movie\">\r\n          <div className=\"Movie__Columns\" onClick={() => this.openModal()}>\r\n            <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n          </div>\r\n          <div className=\"Movie__Columns\" onClick={() => this.openModal()}>   \r\n          <h1><a href=\"#\" onClick={function(e){\r\n            e.preventDefault();\r\n          }}>{this.props.title}</a></h1>\r\n          <div className=\"Movie__Genres\" onClick={() => this.openModal()}>\r\n          {this.props.genres.map((genres, index) => <MovieGenrel genres={genres} key={index}/>)}\r\n          </div>\r\n          <div className=\"Movie__Synopsis\" onClick={() => this.openModal()}>\r\n          <LinesEllipsis\r\n                      text={this.props.synopsis}\r\n                      maxLine='3'\r\n                      ellipsis='...'\r\n                      trimRight\r\n                      basedOn='letters'\r\n                      />   \r\n          </div>\r\n        </div>\r\n        <Modal visible={this.state.visible} width=\"80%\" height=\"90%\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <div>\r\n                        <View  \r\n                          title={this.props.title}\r\n                          poster={this.props.poster}\r\n                          genres={this.props.genres}\r\n                          synopsis={this.props.synopsis}\r\n                          id={this.props.id}></View>\r\n                    <a href=\"javascript:void(0);\" onClick={() => this.closeModal()}>닫기</a>\r\n                    </div>\r\n                </Modal>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\n\r\n  Movie.propTypes = {\r\n      title: PropTypes.string.isRequired,\r\n      poster: PropTypes.string.isRequired,\r\n      genres: PropTypes.array.isRequired,\r\n      synopsis: PropTypes.string.isRequired\r\n  }\r\n\r\n  function MovieGenrel({genres}){\r\n    return(\r\n      <span className=\"Movie__Genre\">{genres}</span>\r\n    )\r\n  }\r\n\r\n  MovieGenrel.propTypes = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\nimport InfiniteLoader from \"react-infinite-loader\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    num:1,\r\n    movies:[],\r\n    maximumPage:20\r\n  }\r\n  \r\n  componentDidMount(){\r\n    this._getMovies()\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie,index) => {\r\n      return (\r\n      <Movie \r\n       title={movie.title_english}\r\n       poster={movie.medium_cover_image}\r\n       key={index} \r\n       genres={movie.genres}\r\n       synopsis={movie.synopsis}\r\n       id={movie.id}\r\n      />\r\n      );\r\n  });\r\n  return movies\r\n};\r\n\r\n _getMovies = async () => {\r\n  let items = this.state.movies.slice();\r\n  const movies = await this._callApi();\r\n  items = items.concat(movies);\r\n  this.setState({\r\n    movies: items\r\n  })\r\n}\r\n\r\n_callApi = () => {\r\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\r\n    .then(response => response.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n_loaditems = () => {\r\n  if(this.state.num < this.state.maximumPage){\r\n    this.setState({\r\n      num: this.state.num + 1,\r\n    });\r\n    this._getMovies(this.state.num);\r\n  }\r\n  \r\n};\r\n\r\n  render(){ \r\n    const {movies} = this.state;\r\n    return(\r\n    <div className={movies ? \"App\" : \"App-loading\"}>\r\n      {this.state.movies.length !== 0\r\n          ? this._renderMovies()\r\n          : \"Loading...\"}\r\n    <div>\r\n    <InfiniteLoader onVisited = {() => this._loaditems()} />\r\n    </div>\r\n    <div>\r\n    \r\n    </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}