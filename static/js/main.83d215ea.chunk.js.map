{"version":3,"sources":["View.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Reply","_ref","data","react_default","a","createElement","writer","content","MoviePoster","_ref2","poster","alt","src","title","className","View","state","replys","id","_this","props","this","synopsis","href","target","rel","type","placeholder","cols","rows","style","width","value","Component","MovieGenrel","genres","Movie","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","visible","setState","_this2","onClick","openModal","Movie_MoviePoster","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","react_awesome_modal_lib_default","height","effect","onClickAway","closeModal","src_View","App","num","movies","maximumPage","_renderMovies","movie","src_Movie","title_english","medium_cover_image","_getMovies","_callee","items","regenerator_default","wrap","_context","prev","next","slice","_callApi","sent","concat","stop","fetch","then","response","json","catch","err","console","log","_loaditems","length","InfiniteLoader_default","onVisited","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83d215ea.chunk.js","sourcesContent":["import React, {Component}from 'react';\r\nimport './movie.css';\r\n\r\nfunction Reply({data}){\r\n  return(\r\n    <div>\r\n        <div>{data[0].writer}</div>\r\n        <div>{data[0].content}</div>\r\n        <hr />\r\n    </div>\r\n  )\r\n}\r\nclass View extends Component{\r\n  state = {\r\n  replys: [\r\n  {\r\n    writer: \"너\",\r\n    content: \"재밌어요!\",\r\n    id:this.props.id\r\n  }\r\n]\r\n}\r\n\r\n  render(){\r\n    const textarea_style = {\r\n      width: '80%'\r\n    };\r\n    return(\r\n      <div className=\"Modal_Movie\">\r\n      <div className=\"Modal_Movie__Columns\">\r\n        <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n      </div>\r\n      <div className=\"Modal_Movie__Columns\">\r\n      <h1>{this.props.title}</h1>\r\n      <div className=\"Modal_Movie__Synopsis\">\r\n       {this.props.synopsis}\r\n      </div>\r\n      <hr />\r\n      <div>\r\n        이곳에 입력된 것은 저장 되지 않습니다.<br/>\r\n        백엔드 기능은 <a href=\"https://github.com/sascill/movie/tree/master\" target=\"_blank\" rel=\"noopener noreferrer\">여기</a>에서 확인해주세요.        \r\n      </div>\r\n      <hr />\r\n      <div>\r\n        <div>나</div>\r\n        <div>이거 재밌습니다 ㅋㅋ</div>\r\n      </div>\r\n      <hr />\r\n      <Reply data={this.state.replys}></Reply>\r\n      <div>\r\n      <form>\r\n        <input type=\"text\" placeholder=\"작성자\"></input>\r\n        <input type=\"password\" placeholder=\"*****\"></input><br />\r\n        <textarea cols=\"50\" rows=\"4\" style={textarea_style}></textarea><br />\r\n        <input type=\"submit\" value=\"저장\" />\r\n      </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n    )\r\n}\r\n  }\r\n\r\n  function MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Modal_Movie__Poster\"></img>\r\n    )\r\n  }\r\n\r\nexport default View;","import React, {Component}  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './movie.css';\r\nimport View from './View';\r\nimport Modal from 'react-awesome-modal';\r\n\r\n\r\n\r\n  function MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"></img>\r\n    )\r\n  }\r\n\r\n  MoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n  }\r\n  \r\n  class Movie extends Component{\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          visible : false\r\n      }\r\n  }\r\n \r\n  openModal() {\r\n      this.setState({\r\n          visible : true\r\n      });\r\n  }\r\n\r\n  closeModal() {\r\n      this.setState({\r\n          visible : false\r\n      });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Movie\">\r\n          <div className=\"Movie__Columns\" onClick={() => this.openModal()}>\r\n            <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n          </div>\r\n          <div className=\"Movie__Columns\" onClick={() => this.openModal()}>   \r\n          <h1>{this.props.title}</h1>\r\n          <div className=\"Movie__Genres\" onClick={() => this.openModal()}>\r\n          {this.props.genres.map((genres, index) => <MovieGenrel genres={genres} key={index}/>)}\r\n          </div>\r\n          <div className=\"Movie__Synopsis\" onClick={() => this.openModal()}>\r\n          <LinesEllipsis\r\n                      text={this.props.synopsis}\r\n                      maxLine='3'\r\n                      ellipsis='...'\r\n                      trimRight\r\n                      basedOn='letters'\r\n                      />   \r\n          </div>\r\n        </div>\r\n        <Modal visible={this.state.visible} width=\"1000\" height=\"600\" effect=\"fadeInUp\" onClickAway={() => this.closeModal()}>\r\n                    <div>\r\n                        <View  \r\n                          title={this.props.title}\r\n                          poster={this.props.poster}\r\n                          genres={this.props.genres}\r\n                          synopsis={this.props.synopsis}\r\n                          id={this.props.id}></View>\r\n                        <a href=\"javascript:void(0);\" onClick={() => this.closeModal()}>Close</a>\r\n                    </div>\r\n                </Modal>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\n\r\n  Movie.propTypes = {\r\n      title: PropTypes.string.isRequired,\r\n      poster: PropTypes.string.isRequired,\r\n      genres: PropTypes.array.isRequired,\r\n      synopsis: PropTypes.string.isRequired\r\n  }\r\n\r\n  function MovieGenrel({genres}){\r\n    return(\r\n      <span className=\"Movie__Genre\">{genres}</span>\r\n    )\r\n  }\r\n\r\n  MovieGenrel.propTypes = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\nimport InfiniteLoader from \"react-infinite-loader\";\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    num:1,\r\n    movies:[],\r\n    maximumPage:20\r\n  }\r\n  \r\n  componentDidMount(){\r\n    this._getMovies()\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie,index) => {\r\n      return (\r\n      <Movie \r\n       title={movie.title_english}\r\n       poster={movie.medium_cover_image}\r\n       key={index} \r\n       genres={movie.genres}\r\n       synopsis={movie.synopsis}\r\n       id={movie.id}\r\n      />\r\n      );\r\n  });\r\n  return movies\r\n};\r\n\r\n _getMovies = async () => {\r\n  let items = this.state.movies.slice();\r\n  const movies = await this._callApi();\r\n  items = items.concat(movies);\r\n  this.setState({\r\n    movies: items\r\n  })\r\n}\r\n\r\n_callApi = () => {\r\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\r\n    .then(response => response.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n_loaditems = () => {\r\n  if(this.state.num < this.state.maximumPage){\r\n    this.setState({\r\n      num: this.state.num + 1,\r\n    });\r\n    this._getMovies(this.state.num);\r\n  }\r\n  \r\n};\r\n\r\n  render(){ \r\n    const {movies} = this.state;\r\n    return(\r\n    <div className={movies ? \"App\" : \"App-loading\"}>\r\n      {this.state.movies.length !== 0\r\n          ? this._renderMovies()\r\n          : \"Loading...\"}\r\n    <div>\r\n    <InfiniteLoader onVisited = {() => this._loaditems()} />\r\n    </div>\r\n    <div>\r\n    \r\n    </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}